import React, { useState, useEffect, useRef } from "react";
import { Canvas, useFrame } from "@react-three/fiber";
import { Stars } from "@react-three/drei";
import { useNavigate } from "react-router-dom";
import { OrbitControls } from "@react-three/drei";


import { TextureLoader } from "three";
import { useLoader } from "@react-three/fiber";

const TerminalTrigger = ({ onOpen }) => {
  const [opacity, setOpacity] = useState(1);

  useEffect(() => {
    const interval = setInterval(() => {
      setOpacity((prev) => (prev === 1 ? 0.7 : 1));
    }, 2000);
    return () => clearInterval(interval);
  }, []);

  return (
    <div
      onClick={onOpen}
      style={{
        position: "absolute",
        bottom: "20px",  // ‚úÖ –†–∞–∑–º–µ—â–∞–µ–º –≤–Ω–∏–∑—É
        left: "20px",    // ‚úÖ –†–∞–∑–º–µ—â–∞–µ–º —Å–ª–µ–≤–∞
        color: "#0f0",
        fontFamily: "Courier New, monospace",
        fontSize: "18px",
        cursor: "pointer",
        opacity,
        transition: "opacity 1.5s ease-in-out",
        zIndex: 30,
      }}
    >
      [—Ç–µ—Ä–º–∏–Ω–∞–ª]
    </div>
  );
};

const Logo = ({ onClick }) => {
  const texture = useLoader(TextureLoader, "/dialer/newsite/logo.png");

  return (
    <sprite
      position={[0, 0, -0.5]}
      scale={[1, 1, 1]}
      onPointerDown={onClick}
      onPointerOver={(e) => (document.body.style.cursor = "pointer")}
      onPointerOut={(e) => (document.body.style.cursor = "default")}
    >
      <spriteMaterial
        attach="material"
        map={texture}
        // transparent={true}
        // premultipliedAlpha={true}
        // depthTest={false}
        // depthWrite={false}
      />
    </sprite>
  );
};

const CameraAnimation = () => {
  const cameraRef = useRef();
  const [zoomIn, setZoomIn] = useState(true);
  const [progress, setProgress] = useState(0);

  useFrame(({ camera }) => {
    if (zoomIn && progress < 1) {
      setProgress((prev) => prev + 0.00001); // –°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è

      camera.position.lerp(
        { x: 0, y: 0, z: 2 }, // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã (–≤–Ω—É—Ç—Ä–∏ —Å—Ñ–µ—Ä—ã)
        progress
      );

      if (progress >= 1) {
        setZoomIn(false); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
      }
    }
  });

  return null;
};



// üîπ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
const commands = {
  "botn": "/botn",
  "—É—Å–ª—É–≥–∏": "/services",
  "–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ": "/portfolio",
  "–∫–æ–Ω—Ç–∞–∫—Ç—ã": "/contacts",
};


// üîπ –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —á–∏—Å–ª–∞
const getRandomStart = () => {
    return Math.floor(Math.random() * (9999999 - 1000000)) + 1000000;
  };

// üîπ –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª –Ω–∞—á–∏–Ω–∞—è —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞
const generatePrimes = function* () {
    let num = getRandomStart(); // –ù–∞—á–∏–Ω–∞–µ–º —Å –±–æ–ª—å—à–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
    while (true) {
      if (isPrime(num)) yield num;
      num++;
    }
  };

// üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç—É
const isPrime = (num) => {
    if (num < 2) return false;
    for (let i = 2; i <= Math.sqrt(num); i++) {
      if (num % i === 0) return false;
    }
    return true;
  };

  

  const DigitalDecodeText = ({ text, speed = 50 }) => {
    const [displayText, setDisplayText] = useState("");
    const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_-+=<>?/{}[]";
  
    useEffect(() => {
      let currentText = text.split("").map(() => characters[Math.floor(Math.random() * characters.length)]);
      setDisplayText(currentText.join(""));
  
      let index = 0;
      const interval = setInterval(() => {
        if (index < text.length) {
          currentText[index] = text[index]; // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
          setDisplayText(currentText.join(""));
          index++;
        } else {
          clearInterval(interval);
        }
      }, speed);
  
      return () => clearInterval(interval);
    }, [text, speed]);
  
    return (
      <pre
        style={{
          whiteSpace: "pre-wrap",
          wordBreak: "break-word",
          overflowWrap: "break-word",
          fontFamily: "Courier New, monospace",
          color: "#0f0",
          fontSize: "16px",
        }}
      >
        {displayText}
      </pre>
    );
  };
  
  // üîπ –¢–µ—Ä–º–∏–Ω–∞–ª —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
  const HelpTerminal = ({ onClose, zIndex }) => {
    const instructionText = `
  –û –∫–æ–º–ø–∞–Ω–∏–∏
  
  –ú—ã ‚Äî –∫–æ–º–∞–Ω–¥–∞ IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, —Å–æ–∑–¥–∞—é—â–∞—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –∏ —á–∞—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ù–∞—à –ø—Ä–æ—Ñ–∏–ª—å ‚Äî —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –¥–ª—è web –∏ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º, —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö, –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
  
  –ó–∞ –≥–æ–¥—ã —Ä–∞–±–æ—Ç—ã –º—ã –Ω–∞–∫–æ–ø–∏–ª–∏ –æ–ø—ã—Ç –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö, –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö —Ä–µ—à–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –∫–æ–º–ø–∞–Ω–∏—è–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —Ä–∞–±–æ—Ç—É.
  
  - –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ IT-–ø—Ä–æ–¥—É–∫—Ç—ã, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –∑–∞–¥–∞—á–∏ –±–∏–∑–Ω–µ—Å–∞.
  - –°–æ–∑–¥–∞–µ–º web- –∏ –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
  - –†–∞–±–æ—Ç–∞–µ–º —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö, —Å—Ç—Ä–æ–∏–º –Ω–∞–¥–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
  - –†–∞–∑–≤–∏–≤–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.
  - –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –≤–∫–ª—é—á–∞—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ —Å–µ—Ç–µ–π.
  
  –ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞, –∞ –Ω–µ –Ω–∞–æ–±–æ—Ä–æ—Ç, –∏ –ø–æ–º–æ–≥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –≤–Ω–µ–¥—Ä—è—Ç—å —É–¥–æ–±–Ω—ã–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è.
  
  –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ [Esc] –∏–ª–∏ –∑–∞–∫—Ä–æ–π—Ç–µ —ç—Ç–æ –æ–∫–Ω–æ.
  `;
  
    return (
<div
      style={{
        position: "absolute",
        top: "50%",
        left: "50%",
        transform: "translate(-50%, -50%)",
        width: "650px",
        maxWidth: "90%",
        maxHeight: "70vh",
        padding: "10px",
        background: "black",
        color: "#0f0",
        fontFamily: "Courier New, monospace",
        fontSize: "16px",
        // border: "2px solid green",
        zIndex: zIndex,
        textAlign: "left",
        overflowY: "auto", // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        scrollbarWidth: "thin", // ‚úÖ –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Firefox
        scrollbarColor: "green black", // ‚úÖ –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Firefox
      }}
    >
      {/* ‚úÖ –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è Webkit-–±—Ä–∞—É–∑–µ—Ä–æ–≤ (Chrome, Edge, Safari) */}
      <style>
        {`
        /* –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ */
        ::-webkit-scrollbar {
          width: 8px;
        }

        /* –¢—Ä–µ–∫ (—Ñ–æ–Ω –∑–∞ –ø–æ–ª–∑—É–Ω–∫–æ–º) */
        ::-webkit-scrollbar-track {
          background: black;
          border-radius: 5px;
        }

        /* –ü–æ–ª–∑—É–Ω–æ–∫ (—Å–∞–º —Å–∫—Ä–æ–ª–ª) */
        ::-webkit-scrollbar-thumb {
          background: green;
          border-radius: 5px;
        }

        /* –ü–æ–ª–∑—É–Ω–æ–∫ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
        ::-webkit-scrollbar-thumb:hover {
          background: lime;
        }
        `}
      </style>
        <DigitalDecodeText text={instructionText} speed={1} /> {/* üëà –≠—Ñ—Ñ–µ–∫—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ */}
        <button
          onClick={onClose}
          style={{
            background: "black",
            color: "#0f0",
            border: "1px solid green",
            fontFamily: "Courier New, monospace",
            fontSize: "14px",
            padding: "5px",
            marginTop: "10px",
            cursor: "pointer",
            width: "100%",
          }}
        >
          [–ó–∞–∫—Ä—ã—Ç—å]
        </button>
      </div>
    );
  };
  
// üîπ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç "–Ω–∞–≤–∏–≥–∞—Ü–∏–∏" —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–µ–Ω—é
const NavigationTrigger = ({ onOpen, onToggleMenu, showMenu }) => {
    const [opacity, setOpacity] = useState(1);
    const menuRef = useRef(null);
    const timeoutRef = useRef(null);
  
    useEffect(() => {
      const interval = setInterval(() => {
        setOpacity((prev) => (prev === 1 ? 0.7 : 1));
      }, 2000);
      return () => clearInterval(interval);
    }, []);
  
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    useEffect(() => {
      if (showMenu) {
        clearTimeout(timeoutRef.current);
        timeoutRef.current = setTimeout(() => {
          onToggleMenu(false);
        }, 30000); // –ó–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
      }
    }, [showMenu]);
  
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    useEffect(() => {
      const handleClickOutside = (event) => {
        if (menuRef.current && !menuRef.current.contains(event.target)) {
          onToggleMenu(false);
          clearTimeout(timeoutRef.current); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤—Ä—É—á–Ω—É—é
        }
      };
      if (showMenu) {
        document.addEventListener("mousedown", handleClickOutside);
      }
      return () => {
        document.removeEventListener("mousedown", handleClickOutside);
        clearTimeout(timeoutRef.current); // –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      };
    }, [showMenu]);
  
    return (
      <div style={{ position: "absolute", top: "20px", left: "20px", zIndex: 30 }}>
        {/* ‚úÖ –ö–Ω–æ–ø–∫–∞ [–Ω–∞–≤–∏–≥–∞—Ü–∏—è] */}
        <div
          onClick={onToggleMenu}
          style={{
            color: "#0f0",
            fontFamily: "Courier New, monospace",
            fontSize: "18px",
            cursor: "pointer",
            opacity,
            transition: "opacity 1.5s ease-in-out",
          }}
        >
          [–Ω–∞–≤–∏–≥–∞—Ü–∏—è]
        </div>
  
        {/* ‚úÖ –ë–ª–æ–∫ —Å –º–µ–Ω—é */}
        <div
          ref={menuRef}
          style={{
            marginTop: "5px",
            background: "black",
            padding: "5px",
            width: "180px",
            fontFamily: "Courier New, monospace",
            fontSize: "16px",
            color: "#0f0",
            transition: "opacity 1.5s ease-in-out", // ‚úÖ –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∑–∞ 1.5 —Å–µ–∫
            opacity: showMenu ? 1 : 0,
            visibility: showMenu ? "visible" : "hidden", // ‚úÖ –°–∫—Ä—ã–≤–∞–µ–º –±–µ–∑ display: none
          }}
        >
          {Object.keys(commands).map((key) => (
            <div
              key={key}
              onClick={() => onOpen(commands[key])}
              style={{
                padding: "8px",
                cursor: "pointer",
                transition: "background 0.3s",
              }}
              onMouseOver={(e) => (e.target.style.background = "rgba(0,255,0,0.2)")}
              onMouseOut={(e) => (e.target.style.background = "black")}
            >
              <span style={{ fontSize: "18px" }}>[{key}]</span>
            </div>
          ))}
        </div>
      </div>
    );
  };

// üîπ –¢–µ—Ä–º–∏–Ω–∞–ª —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —á–∏—Å–ª–∞–º–∏
const PrimeTerminal = () => {
    const [output, setOutput] = useState([]);
    const primeGenerator = useRef(generatePrimes()).current;
  
    // –≠—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∏" —á–∏—Å–µ–ª
    useEffect(() => {
      const interval = setInterval(() => {
        const newPrime = primeGenerator.next().value;
        setOutput((prev) => {
          const newOutput = [...prev, `> ${newPrime}`];
          return newOutput.length > 2 ? newOutput.slice(-2) : newOutput;
        });
      }, 2000);
  
      return () => clearInterval(interval);
    }, []);
  
    return (
      <div
        style={{
          position: "absolute",
          bottom: "60px",
          right: "10px",
          width: "300px",
          maxWidth: "80%",
          padding: "10px",
          background: "black",
          color: "green",
          fontFamily: "Courier New, monospace",
          fontSize: "14px",
          border: "2px solid green",
          zIndex: 10,
          wordWrap: "break-word",
          whiteSpace: "pre-wrap", // –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫
          textAlign: "left",
        }}
      >
        <pre>{output.join("\n")}</pre>
      </div>
    );
  };

  const Terminal = ({ onClose, onCommand, zIndex }) => {
    const [input, setInput] = useState("");
    const [output, setOutput] = useState("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É...");
    // const [position, setPosition] = useState({ x: window.innerWidth / 2 - 200, y: window.innerHeight / 3 }); // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
    const [isDragging, setIsDragging] = useState(false);
    const dragOffset = useRef({ x: 0, y: 0 });

    const [position, setPosition] = useState(() => {
      const initialX = window.innerWidth / 2 - 200;
      const initialY = window.innerHeight / 3;
      
      return {
        x: initialX < 0 ? 8 : initialX, // –ï—Å–ª–∏ x < 0 ‚Üí x = 8
        y: initialY,
      };
    });
  
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –º—ã—à–∏ (–Ω–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è)
    const handleMouseDown = (e) => {
      setIsDragging(true);
      dragOffset.current = {
        x: e.clientX - position.x,
        y: e.clientY - position.y
      };
    };
  
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º—ã—à–∏ (–ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ)
    useEffect(() => {
      const handleMouseMove = (e) => {
        if (isDragging) {
          setPosition({
            x: e.clientX - dragOffset.current.x,
            y: e.clientY - dragOffset.current.y
          });
        }
      };
  
      const handleMouseUp = () => setIsDragging(false);
  
      window.addEventListener("mousemove", handleMouseMove);
      window.addEventListener("mouseup", handleMouseUp);
  
      return () => {
        window.removeEventListener("mousemove", handleMouseMove);
        window.removeEventListener("mouseup", handleMouseUp);
      };
    }, [isDragging]);
  
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    const handleKeyDown = (e) => {
      if (e.key === "Enter") {
        const command = input.toLowerCase().trim();
        if (commands[command]) {
          setOutput(`–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: ${command}`);
          setTimeout(() => onCommand(commands[command]), 1000);
        } else {
          setOutput(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n${Object.keys(commands).join(", ")}`);
        }
        setInput("");
      }
    };
  
    return (
      <div
        style={{
          position: "absolute",
          top: `${position.y}px`,
          left: `${position.x}px`,
          width: "400px",
          maxWidth: "90%",
          padding: "10px",
          background: "black",
          color: "green",
          fontFamily: "Courier New, monospace",
          fontSize: "18px",
          border: "2px solid green",
          zIndex: zIndex,
          cursor: isDragging ? "grabbing" : "grab", // –ö—É—Ä—Å–æ—Ä "–∑–∞—Ö–≤–∞—Ç–∞"
        }}
      >
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è */}
        <div
          style={{
            width: "100%",
            padding: "5px",
            background: "#0f0",
            color: "black",
            fontWeight: "bold",
            textAlign: "center",
            cursor: "grab",
          }}
          onMouseDown={handleMouseDown} // –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
        >
          [–¢–µ—Ä–º–∏–Ω–∞–ª]
        </div>
  
        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ */}
        <pre style={{ whiteSpace: "pre-wrap", wordBreak: "break-word", overflowWrap: "break-word", maxWidth: "100%" }}>
          {output}
        </pre>
  
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyDown={handleKeyDown}
          style={{
            width: "100%",
            background: "black",
            color: "green",
            border: "none",
            outline: "none",
            fontFamily: "Courier New, monospace",
            fontSize: "16px",
          }}
          autoFocus
        />
  
        <button
          onClick={onClose}
          style={{
            marginTop: "10px",
            width: "100%",
            background: "black",
            color: "green",
            border: "1px solid green",
            cursor: "pointer",
            fontSize: "14px",
            padding: "5px",
          }}
        >
          [–ó–∞–∫—Ä—ã—Ç—å]
        </button>
      </div>
    );
  };

// üîπ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ (–≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥)
const Terminal0 = ({ onClose, onCommand, zIndex }) => {
  const [input, setInput] = useState("");
  const [output, setOutput] = useState("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É...");

  useEffect(() => {
    const timeout = setTimeout(onClose, 60000);
    return () => clearTimeout(timeout);
  }, []);

  const handleKeyDown = (e) => {
    if (e.key === "Enter") {
      const command = input.toLowerCase().trim();
      if (commands[command]) {
        setOutput(`–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: ${command}`);
        setTimeout(() => onCommand(commands[command]), 1000);
      } else {
        setOutput(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n${Object.keys(commands).join(", ")}`);
      }
      setInput("");
    }
  };

  return (
    <div
      style={{
        display: "inline-block",
        position: "absolute",
        top: "30%",
        left: "50%",
        transform: "translate(-50%, -50%)",
        width: "400px",
        maxWidth: "90%",
        padding: "10px",
        background: "black",
        color: "green",
        fontFamily: "Courier New, monospace",
        fontSize: "18px",
        border: "2px solid green",
        // zIndex: 10,
        zIndex: zIndex, // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π zIndex
      }}
    >
      <pre
        style={{
          whiteSpace: "pre-wrap",
          wordBreak: "break-word",
          overflowWrap: "break-word",
          maxWidth: "100%",
        }}
      >
        {output}
      </pre>
      <input
        type="text"
        value={input}
        onChange={(e) => setInput(e.target.value)}
        onKeyDown={handleKeyDown}
        style={{
          width: "100%",
          background: "black",
          color: "green",
          border: "none",
          outline: "none",
          fontFamily: "Courier New, monospace",
          fontSize: "16px",
        }}
        autoFocus
      />
    </div>
  );
};

// üîπ –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
const ParticleSpace = () => {
  const navigate = useNavigate();
  const [showTerminal, setShowTerminal] = useState(false);
  const [showHelp, setShowHelp] = useState(false);

  const [terminalZIndex, setTerminalZIndex] = useState(10);
  const [helpZIndex, setHelpZIndex] = useState(10);

  const [showMenu, setShowMenu] = useState(false); // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º / —Å–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
  const [highestZIndex, setHighestZIndex] = useState(10);

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –∏–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
  const handleNavigation = (path) => {
    setShowMenu(false);
    navigate(path);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–Ω—è—Ç–∏—è zIndex
  const bringToFront = (setZIndex) => {
    setHighestZIndex((prev) => prev + 1); // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π zIndex
    setZIndex(highestZIndex + 1); // –î–∞–µ–º –Ω–æ–≤–æ–º—É –æ–∫–Ω—É –Ω–∞–∏–±–æ–ª—å—à–∏–π zIndex
  };

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–º–æ—â–∏ –ø–æ –Ω–∞–∂–∞—Ç–∏—é `Esc`
  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.key === "Escape") {
        setShowHelp(false);
        // setShowTerminal(false); // ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏ —Ç–µ—Ä–º–∏–Ω–∞–ª —Ç–æ–∂–µ
        setShowMenu(false); // ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
        setShowTerminal(false);
      }
    };
    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, []);

  return (
    <div style={{ position: "absolute", top: 0, left: 0, width: "100vw", height: "100vh" }}>
      <Canvas camera={{ position: [0, 0, 1030] }}> {/* –ö–∞–º–µ—Ä–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –¥–∞–ª–µ–∫–æ */}
        {/* ‚úÖ –ö–∞–º–µ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏—è */}
        <CameraAnimation />

        {/* ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–∑–æ—Ä–æ–º */}
        <OrbitControls enableZoom={true} maxPolarAngle={Math.PI / 2} />

        {/* ‚úÖ –§–æ–Ω —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ */}
        <Stars radius={100} depth={50} count={5000} factor={8} saturation={0} fade />

        {/* ‚úÖ –õ–æ–≥–æ—Ç–∏–ø */}
        {/* <Logo /> */}
        {/* <Logo onClick={() => setShowHelp(true)} /> */}
        <Logo onClick={() => { setShowHelp(true); bringToFront(setHelpZIndex); }} />
      </Canvas>

      {/* ‚úÖ –ú–µ–Ω—é –ø–æ–¥ [–Ω–∞–≤–∏–≥–∞—Ü–∏—è] */}
      <NavigationTrigger
        onOpen={handleNavigation}
        onToggleMenu={() => setShowMenu((prev) => !prev)}
        showMenu={showMenu}
      />

      {/* ‚úÖ –¢–µ—Ä–º–∏–Ω–∞–ª —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —á–∏—Å–ª–∞–º–∏ */}
      <PrimeTerminal />

      {/* ‚úÖ –¢–µ—Ä–º–∏–Ω–∞–ª-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
      {showHelp && <HelpTerminal onClose={() => setShowHelp(false)} zIndex={helpZIndex} />}

      {/* ‚úÖ –ú–∏–≥–∞—é—â–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      {/* {!showTerminal && <NavigationTrigger onOpen={() => { setShowTerminal(true); bringToFront(setTerminalZIndex); }} />} */}

      {/* ‚úÖ –¢–µ—Ä–º–∏–Ω–∞–ª –∫–æ–º–∞–Ω–¥ */}
      {showTerminal && (
        <Terminal
          onClose={() => setShowTerminal(false)}
          onCommand={(path) => navigate(path)}
          zIndex={terminalZIndex}
        />
      )}

      <TerminalTrigger onOpen={() => { setShowTerminal(true); bringToFront(setTerminalZIndex); }} />
    </div>
  );
};

export default ParticleSpace;